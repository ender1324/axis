on_actions = {
	# country
	on_new_term_election = {
		random_events = {
			100 = election.2
			100 = election.3
			100 = election.4
			100 = election.5
			100 = election.6
			100 = election.11
			100 = election.12
			100 = election.13
			100 = election.14
			100 = election.15
		}
	}

	# Ace pilots
	# country, FROM = ace
	on_ace_promoted = {
		random_events = {
			100 = ace_promoted.1
			5 = ace_promoted.2
		}
	}

	# country, FROM = ace, PREV = enemy ace
	# This event fires twice, once for each ace.
	on_aces_killed_each_other = {
		random_events = {
			100 = aces_killed_each_other.1
		}
	}

	# country, FROM = our ace,
	# PREV = enemy ace, has killed FROM
	on_ace_killed_by_ace = {
		random_events = {
			100 = ace_killed_by_ace.1
		}
	}

	# country, FROM = our ace,
	# PREV = enemy ace, killed by FROM
	on_ace_killed_other_ace = {
		random_events = {
			100 = ace_killed_other_ace.1
		}
	}

	# our ace is killed by no name
	# country, FROM = ace
	on_ace_killed = {
		random_events = {
			100 = ace_died.1
		}
	}

	# our ace died in accident
	# country, FROM = ace
	on_ace_killed_on_accident = {

	}

	# enemy ace is killed by our non name
	# country, FROM = enemy ace
	on_non_ace_killed_other_ace = {

	}

	on_nuke_drop = {

		effect = {
			set_global_flag = first_nuke_dropped
			if = {
				limit = { NOT = { has_global_flag = first_nuke_dropped } }
				country_event = { id = generic.8 }
			}

			news_event = { id = nuke_dropped.2 days = 1}
			news_event = { id = nuke_dropped.3 days = 1}
			news_event = { id = nuke_dropped.4 days = 1}
			news_event = { id = nuke_dropped.5 days = 1}
			news_event = { id = nuke_dropped.6 days = 1}
			news_event = { id = nuke_dropped.7 days = 1}
			news_event = { id = nuke_dropped.8 days = 1}
			news_event = { id = nuke_dropped.9 days = 1}
			news_event = { id = nuke_dropped.10 days = 1}
			news_event = { id = nuke_dropped.11 days = 1}
			news_event = { id = nuke_dropped.12 days = 1}
			news_event = { id = nuke_dropped.13 days = 1}
		}
		random_events = {
			100 = nuke_dropped.0
		}
	}

	# country random events
	#on_bi_yearly_pulse = {
	#
	#}

	#on_five_year_pulse = {
	#
	#}

	on_border_war_lost = {
		effect = {
			owner = {
				country_event = { id = china.14 }
				country_event = { id = china.16 }
			}
		}
	}

	on_leave_faction = {
		effect = {
			FROM = {
				add_opinion_modifier = {
					modifier = faction_traitor
					target = ROOT
					days = 365
				}

				add_opinion_modifier = {
					modifier = faction_traitor_trade
					target = ROOT
					days = 365
				}
			}
		}
	}

	#FROM is the one that joins the faction
	on_create_faction = {
		effect = {
		}
	}

	#FROM is country getting invited.
	on_offer_join_faction = {
		effect = {
			#Remove anti_soviet_pact if joining commie Soviet in faction
			if = {
				limit = {
					original_tag = SOV
					has_government = communism
					FROM = {
						has_idea = anti_soviet_pact
					}
				}
				FROM = {
					remove_ideas = anti_soviet_pact
				}
			}
		}
	}

	#FROM is faction leader on join faction requests. THIS DOES NOT FIRE ON ADD_TO_FACTION EFFECT! USE ON_OFFER_JOIN_FACTION!
	on_join_faction = {
		effect = {
			#Remove anti_soviet_pact if joining commie Soviet in faction
			if = {
				limit = {
					has_idea = anti_soviet_pact
					FROM = {
						original_tag = SOV
						has_government = communism
					}
				}
				remove_ideas = anti_soviet_pact
			}
		}
	}

	#FROM is war target
	on_declare_war = {
		effect = {
			#Germany has started a war - allies should try to contain Germany
			if = {
				limit = {
					ROOT = {
						TAG = GER
					}
					NOT = {
						has_global_flag = GER_has_started_war
					}
				}
				set_global_flag = GER_has_started_war
			}



			#Call Anti-Soviet pact members to war
			if = {
				limit = {
					ROOT = {
						original_tag = SOV
						has_government = communism
					}
					FROM = { has_idea = anti_soviet_pact }
				}
				save_event_target_as = anti_soviet_pact_aggressor
				FROM = {
					country_event = { id = germany.84 days = 1 }
				}
			}

			#If prepared by siphoning equipment, receive equipment back
			if = {
				limit = {
					FROM = {
						has_civil_war = yes
						has_country_flag = siphoned_equipment_stockpiles_for_civil_war
					}
					has_civil_war = yes
				}
				FROM = {
					clr_country_flag = siphoned_equipment_stockpiles_for_civil_war
					add_equipment_to_stockpile = {
						type = infantry_equipment
						amount = 1000
					}
				}
			}
		}
	}

	# When a new faction is formed
	on_faction_formed = {
		effect = {
			news_event = { id = news.159 }
		}
	}

	# ROOT is capitulated country, FROM is winner
	on_capitulation = {
		effect = {
			if = {
				limit = {
					tag = GER
					FROM = {
						tag = SOV
					}
					NOT = { has_global_flag = fall_of_berlin_sov }
				}
				play_victory_parade_effect = yes
			}
			if = {
				limit = {
					NOT = { original_tag = GER }
					NOT = { has_government = fascism }
					has_civil_war = no
				}
				news_event = { id = country_capitulated.0 days = 0 }
			}
		}
	}

	# ROOT is previously capitulated country
	on_uncapitulation = {
		effect = {
			# if = {
			# 	limit = {
			# 		original_tag = FRA
			# 		has_government = democratic
			# 		is_puppet = no
			# 	}
			# 	drop_cosmetic_tag = yes
			# }
		}
	}
	#ROOT is capitulated country, FROM is winner.
	on_capitulation_immediate = {
		effect = {
			if = {
				limit = {
					ROOT = {
						original_tag = BEL
						is_in_faction = yes
						#is_government_in_exile = yes
					}
				}
				if = {
					limit = {
						295 = {
							is_fully_controlled_by = ROOT
						}
					}
					295 = { set_state_flag = prevent_auto_flip_after_capitulation }
				}

				if = {
					limit = {
						538 = {
							is_fully_controlled_by = ROOT
						}
					}

					538 = { set_state_flag = prevent_auto_flip_after_capitulation }
				}

				if = {
					limit = {
						888 = {
							is_fully_controlled_by = ROOT
						}
					}

					888 = { set_state_flag = prevent_auto_flip_after_capitulation }
				}

				if = {
					limit = {
						889 = {
							is_fully_controlled_by = ROOT
						}
					}
					889 = { set_state_flag = prevent_auto_flip_after_capitulation }

				}

				if = {
					limit = {
						890 = {
							is_fully_controlled_by = ROOT
						}
					}

					890 = { set_state_flag = prevent_auto_flip_after_capitulation }

				}

				if = {
					limit = {
						769 = {
							is_fully_controlled_by = ROOT
						}
					}

					769  = { set_state_flag = prevent_auto_flip_after_capitulation }
				}

				if = {
					limit = {
						768 = {
							is_fully_controlled_by = ROOT
						}
					}
					768 = { set_state_flag = prevent_auto_flip_after_capitulation }
				}

				if = {
					limit = {
						718 = {
							is_fully_controlled_by = ROOT
						}
					}
					718 = { set_state_flag = prevent_auto_flip_after_capitulation }
				}
			}
			
			if = {
				limit = {
					ROOT = {
						original_tag = FRA
						is_in_faction = yes
					}

					635 = { is_fully_controlled_by = ROOT }
				}

				635 = { set_state_flag = prevent_auto_flip_after_capitulation }
			}
		}
	}

	on_coup_succeeded = {
		effect = {
			#Turn elections on for democracies created from coup
			random_other_country = {
				limit = {
					has_government = democratic
					original_tag = ROOT
				}
				set_politics = {
					ruling_party = democratic
					elections_allowed = yes
				}
			}
		}
	}

	#ROOT is winner #FROM gets annexed - This will also fire on_annex
	on_civil_war_end = {
		effect = {
			if = {
				limit = {
					has_government = democratic
				}
				set_politics = {
					ruling_party = democratic
					elections_allowed = yes
				}
			}
			#End of ideology Civil War
			if = {
				limit = {
					has_country_flag = ideology_civil_war
				}
				clr_country_flag = ideology_civil_war
				set_country_flag = { flag = won_ideology_civil_war value = 1 days = 365 }
				country_event = { id = generic.11 days = 1 }
			}
		}
	}

	#used when puppeting in a peace conference
	#ROOT = nation being puppeted, FROM = overlord

	on_puppet = {
		effect = {
			if = {
				limit = {
					NOT = { has_elections = yes }
					has_government = democratic
				}
				set_politics = {
					ruling_party = democratic
					elections_allowed = yes
				}
			}
		}
	}

	#used when puppeting through the occupied territories menu during peace time (or when releasing from non-core but owned territory, f.e. Britain releasing Egypt)
	#ROOT = nation being released, FROM = overlord

	on_release_as_puppet = {
		effect = {
			if = {
				limit = {
					NOT = { has_elections = yes }
					has_government = democratic
				}
				set_politics = {
					ruling_party = democratic
					elections_allowed = yes
				}
			}
		}
	}

	#ROOT is winner #FROM gets annexed - For civil wars on_civil_war_end is also fired
	on_annex = {
		effect = {
		}
	}

	#Not run on a specific country.
	on_startup = {
		effect = {
			GER = { #Axis and Poland just didn't get along
				add_ai_strategy = {
				   type = alliance
				   id = POL
				   value = -2000
				}
			}
			POL = {
				add_ai_strategy = {
				   type = alliance
				   id = GER
				   value = -2000
				}
			}
		}
	}


	#ROOT = country that joined a war
	#Fired when a country goes to war against anyone and is not fired again when it enters war against another country unless it went to peace first
	on_war = { 
		effect = {
		}
	}
	#ROOT = attacking side
	#FROM = defending side
	#fired when two countries end up at war with each other (on_war is fired when a country goes to war against anyone and is not fired again when it enters war against another country unless it went to peace first)
	on_war_relation_added = {
		effect = {
		}
	}
	#ROOT - country that just went to peace
	on_peaceconference_ended = {
		effect = {
		}
	}

	#ROOT is new controller #FROM is old controller #FROM.FROM is state ID
	on_state_control_changed = {
		effect = {
			if = {
				limit = {
					OR = {
						TAG = ENG
						TAG = USA
						TAG = AST
						TAG = FRA
						TAG = CAN
						TAG = NZL
						TAG = SAF
					}
					FROM = { original_tag = GER }
					FROM = { has_war_with = ROOT }
					FROM.FROM = { state = 16 }
				}
				news_event = news.134
			}
			if = {
				limit = {
					OR = {
						TAG = ENG
						TAG = USA
					}
					FROM = { original_tag = GER }
					FROM = { has_war_with = ROOT }
					FROM.FROM = { state = 126 }
				}
				news_event = news.137
			}
			if = {
				limit = {
					OR = {
						# TAG = POL # don't include POL as the event is about Soviet capture of Warsaw
						TAG = SOV
					}
					NOT = { SOV = { has_war_with = POL } }
					FROM = { original_tag = GER }
					FROM = { has_war_with = ROOT }
					FROM.FROM = { state = 10 }
				}
				news_event = news.139
			}

			if = {
				limit = {
					FROM = {
						is_in_faction = yes
					}

					FROM.FROM = {
						has_state_flag = prevent_auto_flip_after_capitulation
					}
				}

				FROM.FROM = { clr_state_flag = prevent_auto_flip_after_capitulation }
				FROM = {
					set_state_controller = FROM.FROM
				}
				
			}
		}
	}



	# From is owner country
	on_army_leader_daily = {
		effect = {
			if = {
				limit = {
					check_variable = { random < 0.02 }
					NOT = { has_trait = sick }
					set_temp_variable = { temp = sum_unit_terrain_modifier@sickness_chance }
					divide_temp_variable = { temp = num_units }
					check_variable = { temp > 0.75 }
					NOT = { has_unit_leader_flag = recently_sick }
				}
				add_timed_unit_leader_trait = {
					trait = sick
					days = 30
				}
				unit_leader_event = { id = generic.17 }
			}
		}
	}

	# From is owner country
	on_army_leader_won_combat = {
		effect = {
			if = {
				limit = {
					set_temp_variable = { chance = 0.001 }
					set_temp_variable = { factor = 1.0 }
					add_to_temp_variable = { factor = leader_modifier@wounded_chance_factor }
					multiply_temp_variable = { chance = factor }
					check_variable = { random < chance }
					NOT = { has_trait = wounded }
				}
				add_timed_unit_leader_trait = {
					trait = wounded
					days = 90
				}
				unit_leader_event = { id = generic.18 }
			}
		}
	}

	# From is owner country
	on_army_leader_lost_combat = {
		effect = {
			if = {
				limit = {
					set_temp_variable = { chance = 0.005 }
					set_temp_variable = { factor = 1.0 }
					add_to_temp_variable = { factor = leader_modifier@wounded_chance_factor }
					multiply_temp_variable = { chance = factor }
					check_variable = { random < chance }
					NOT = { has_trait = wounded }
				}
				add_timed_unit_leader_trait = {
					trait = wounded
					days = 90
				}
				unit_leader_event = { id = generic.18 }
			}
		}
	}

	on_army_leader_promoted = {
		effect = {
			add_timed_unit_leader_trait = {
				trait = recently_promoted
				days = 100
			}
		}
	}

	# root country that invades
	# scope state that is invaded
	# from scope state that the invasion started
	on_naval_invasion = {
	 	effect = {
		 	if = {
				limit = {
					ROOT = {
						divisions_in_state = {
							 unit = marine_commando
							 size > 0
							 state = PREV
						}
						 has_tech = marines_commandos_demolition 
					}
					NOT = { has_state_flag = marines_commando_effect }
					OWNER = { NOT = { tag = ROOT } }
				}
				SF_marine_demoliton_effect = yes # Note that the state flag condition is not preventing it from doing 1 damage per division 
			}
	 	}
	}


	# root country that paradrops
	# scope state that is paradroped into
	# from scope state that the paradrop started
	on_paradrop = {
	    effect = {
		    ROOT = { set_country_flag = has_paradropped_flag }
		}
	}
	on_ruling_party_change = {
		# temp var old_ideology_token is available for effects
		effect = {
			every_controlled_state = {
				limit = {
					has_resistance = yes
				}
				set_temp_variable = { new_compliance = compliance }
				multiply_temp_variable = { new_compliance = 0.5 }
				set_compliance = new_compliance
			}
		}
	}

	on_unit_leader_promote_from_ranks_veteran = { #Unit leader scope, FROM is unit
		effect = {
			FROM = {
				add_random_valid_trait_from_unit = {
					character = ROOT
				}
			}
			set_unit_leader_flag = field_promotion_achievement
		}
	}

	on_unit_leader_promote_from_ranks_green = { #Unit leader scope, FROM is unit
		effect = {
			set_unit_leader_flag = field_promotion_achievement
		}
	}

	on_add_history = { #Unit Scope
		effect = {
			#add_unit_medal_to_latest_entry = {
			#	unit_medals = iron_cross_second_class
			#} #This would add a unit medal to the history entry you just received
		}
	}
	
	# root is the state that was dropped into
	# from is the dropping country
	# this differs from on_paradrop in that it is run once per paradrop, not once per unit dropped
	on_units_paradropped_in_state = {
		effect = {
			if = {
				limit = { 
					FROM = { has_tech = paras_dispersed_drop } 
					NOT = { has_state_flag = para_drop_effect }
					CONTROLLER = { NOT = { tag = FROM } }
				}
				SF_PARA_sabotage_effect = yes
			}
			if = {
				limit = { 
					FROM = { has_tech = paras_combat_drop } 
					NOT = { has_state_flag = para_drop_effect }
				}
				SF_PARA_combat_effect = yes
			}
		}
	}

	on_peaceconference_started = {
		effect = {
			if = {
				limit = {
					295 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				295 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					538 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				538 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					888 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				888 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					889 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				889 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					890 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				890 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}


			if = {
				limit = {
					769 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				769 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					768 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				768 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					718 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				718 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					635 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				635 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}
		}
	}
}
